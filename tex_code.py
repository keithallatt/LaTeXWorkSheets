"""

"""
import abc
import os
import shutil
import subprocess
import tempfile
from pathlib import Path


def _mask(length, shift):
    def mask_variable(var):
        return var & (((1 << length) - 1) << shift)

    return mask_variable


def compile_tex(filename, tex, solutions=True, double_compile=False, save_tex=False, debug=False):
    """ Compile LaTeX into a pdf and save it to the current working directory. """
    # make both tex and pdf filepaths.
    filepath = Path(filename)
    filepath_tex = filepath.with_suffix('.tex')
    filepath_pdf = filepath.with_suffix('.pdf')

    # get cwd to reset directory after.
    current = os.getcwd()
    # convert tex into a string, if not already a string.
    tex_content = tex.__str__(solutions) if isinstance(tex, LaTeXPiece) else str(tex)
    # create temp folder to compile in.
    temp_path = tempfile.mkdtemp()
    # change directory to temp folder.
    os.chdir(temp_path)

    # temporary document name, only having it saved here increases maintainability.
    doc_name = Path("document.tex")

    # write the LaTeX content to file
    with open(doc_name, 'w') as f:
        f.write(tex_content)

    # compile the document using pdflatex
    for _ in range(2 if double_compile else 1):
        # for some applications, such as those that have tables of contents, sometimes 2 compiles are necessary.
        proc = subprocess.Popen(['pdflatex', '\\input{'+str(doc_name)+'}'], stdout=subprocess.PIPE)
        returned = proc.communicate()[0]
        if debug:
            print(returned)

    # rename the file to the specified name and copy the file back to the current working directory
    os.rename(doc_name.with_suffix('.pdf'), filepath_pdf)
    shutil.copy(filepath_pdf, current)
    if save_tex:
        os.rename(doc_name.with_suffix('.tex'), filepath_tex)
        shutil.copy(filepath_tex, current)

    # remove the temporary path
    shutil.rmtree(temp_path)
    # change the directory back.
    os.chdir(current)


class LaTeXPiece(abc.ABC):
    def __init__(self):
        pass

    @abc.abstractmethod
    def __str__(self, solved=False):
        pass


class TexDocument(LaTeXPiece):
    def __init__(self, document_class='report'):
        super().__init__()
        self._doc_class = "\\documentclass{" + document_class + "}"
        self._preamble_comments = '\n% '.join("""
            Generated by LaTeX Work Sheets:
                - 
        """.split("\n"))
        self._preamble = list(map(str.strip, r"""
            \usepackage[letterpaper,top=2cm,bottom=2cm,left=3cm,right=3cm,marginparwidth=1.75cm]{geometry}

            \usepackage{titlesec}
            \setcounter{secnumdepth}{4}
            \renewcommand\thesection{\arabic{section}}
            \renewcommand\thesubsection{\arabic{section}.\arabic{subsection}}
            \renewcommand\thesubsubsection{\arabic{section}.\arabic{subsection}.\arabic{subsubsection}}
            \titleformat{\section}
            {\normalfont\scshape}{\thesection}{1em}{}
            \titleformat{\subsection}
            {\normalfont\scshape\small}{\thesubsection}{1em}{}
            \titleformat{\subsubsection}
            {\normalfont\scshape\small}{\thesubsubsection}{1em}{}
            \usepackage{placeins}
            \usepackage[english]{babel}
            \usepackage{amsmath}
            \usepackage{graphicx}
            \usepackage[colorlinks=true, allcolors=blue]{hyperref}
            \linespread{1.5}

            \titleformat{\section}
              {\normalfont\bfseries}{Problem \# \thesection}
              {0em}{}
            """.split("\n")))

        self._doc_begin = "\\begin{document}\n\n"
        self._body = []
        self._generated_by = ''.join([r"\vspace*{\fill}", "\n\n" 
                                      r"\textbf{\LaTeX Work Sheets}: ",
                                      r"\href{https://github.com/keithallatt/LaTeXWorkSheets}",
                                      "{https://github.com/keithallatt/LaTeXWorkSheets}",
                                      r" @ Keith Allatt, 2022"])
        self._doc_end = "\n\n\\end{document}"

    def add_content(self, tex):
        self._body.append(tex)
        if hasattr(tex, 'prerequisite_packages'):
            # need to check for option clashes between imports.
            for prereq in tex.prerequisite_packages:
                # naive solution;
                if prereq not in self._preamble:
                    self._preamble.append(prereq)

    def add_package(self, package, *options):
        self._preamble.append(fr"\usepackage[{', '.join(map(str, options))}]" + "{" + str(package) + "}")

    def __str__(self, solved=False):
        return "\n\n".join([
            self._doc_class,
            self._preamble_comments,
            "\n".join(self._preamble),
            self._doc_begin,
            "\n\n\\FloatBarrier\\section{}\\FloatBarrier\n\n".join(
                [''] + list(map(lambda x: x.__str__(solved) if isinstance(x, LaTeXPiece) else str(x), self._body))),
            self._generated_by,
            self._doc_end
        ])


# PROBLEM LEVEL #

class Problem(LaTeXPiece):
    def __init__(self):
        super().__init__()

    @abc.abstractmethod
    def __str__(self, solved=False):
        pass


if __name__ == '__main__':
    pass
